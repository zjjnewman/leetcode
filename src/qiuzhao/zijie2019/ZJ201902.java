package qiuzhao.zijie2019;

import java.io.BufferedWriter;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.util.*;

/**
 * 万万没想到之抓捕孔连顺 https://www.nowcoder.com/question/next?pid=16516564&qid=362290&tid=35307451
 * 答案解析 https://www.nowcoder.com/test/question/done?tid=35258752&qid=362290
 * 详细答案解析  https://www.cnblogs.com/asenyang/p/11220277.html
 *
 */
public class ZJ201902 {
    /**
     * n个点里选3个点，其中两两点的最远距离 <= d
     * 可以 有多少种选法
     *
     * 从给定的 不重复的数集 选出3个数，这三个数 两两之间的差 <= d, 有多少种选择方案
     *
     * 初步想法：把给定的数集升序排序，按数轴的方式向右移动，遍历所有方案，保证方案之间不重复
     *      如：到达初始点 数轴1，那么以 1 为基础的方案，必须含有1，遍历找出所有可行方案，然后数轴向右移动到 2
     *
     * 考虑使用单调栈解决，推导过程，栈中状态按 栈的size 有 3个
     *    假设 d = 2
     *    size = 1：
     *      1：
     *          3   2
     *          4   1
     *    size = 2：
     *    1，3：
     *          2   3
     *          5   2
     *    size = 3：
     *
     *  1，3，5：
     *          满则方案条件，方案数+1，弹出5 状态变更为 2（1 3）
     *
     */

    public long choose(int[] nums, int d){

        int left = 0;
        int right = 2;
        long cnt = 0;

        while (right < nums.length){
            if(nums[right] - nums[left] > d){
                left++;
            } else if (right - left < 2){
                right++;
            } else { // 这里的定界是right，上面的条件都不满足的时候 肯定 是
                cnt = (cnt + cn2(right - left)) % 99997867;
                right++;
            }
        }
        return cnt;
    }

    public long cn2(long n){
        return n * (n - 1) / 2;
    }

    // 时间复杂度太大
    public int choose1(int[] nums, int d){

        int cnt = 0;

        for (int i = 0; i < nums.length - 2; i++) {

            for (int j = i + 1; j < nums.length - 1; j++) {

                if(Math.abs(nums[i] - nums[j]) <= d){

                    for (int k = j + 1; k < nums.length; k++) {

                        if(Math.abs(nums[j] - nums[k]) <= d && Math.abs(nums[i] - nums[k]) <= d){
                            cnt = (cnt + 1) % 99997867;
                        }
                    }
                }
            }
        }

        return cnt;
    }


    public static void main(String[] args) throws IOException {
        Scanner scanner = new Scanner(System.in);
        BufferedWriter bufferedWriter = new BufferedWriter(new OutputStreamWriter(System.out));
        int n = scanner.nextInt();
        int d = scanner.nextInt();

        if(n < 3){
            return;
        }

        int[] nums = new int[n];
        for (int i = 0; i < n; i++) {
            nums[i] = scanner.nextInt();
        }

        ZJ201902 t = new ZJ201902();

        long cnt = t.choose(nums, d);

        bufferedWriter.write(String.valueOf(cnt));
        bufferedWriter.flush();
    }
}

/* 测试用例，运行时间超长
42440 41338 7 8 12 14 26 29 31 33 35 36 46 49 62 63 64 69 80 83 87 99 103 120 122 123 139 141 143 148 149 151 154 155 161 162 167 171 177 196 199 203 205 207 217 227 228 234 247 256 264 268 276 283 294 296 297 298 300 302 310 316 325 327 335 338 339 347 349 356 358 359 361 368 384 386 388 401 402 407 409 412 419 425 426 432 433 438 448 466 479 488 489 498 499 503 506 511 527 528 536 539 549 555 573 574 579 593 598 599 601 605 606 609 612 622 624 629 639 649 655 657 660 667 672 682 683 689 691 692 702 703 705 715 717 719 725 739 745 753 765 767 775 780 795 802 803 805 808 810 814 825 826 827 841 848 850 854 856 857 858 860 865 866 869 873 878 883 892 895 898 907 917 919 920 928 934 937 942 948 949 951 954 958 963 965 974 976 980 983 984 995 998 1004 1018 1020 1024 1028 1032 1034 1043 1044 1049 1056 1061 1067 1069 1074 1080 1082 1084 1085 1086 1088 1096 1110 1111 1122 1127 1128 1129 1134 1140 1143 1144 1145 1165 1167 1181 1182 1183 1186 1191 1194 1199 1200 1208 1211 1221 1225 1227 1229 1236 1244 1246 1259 1260 1264 1265 1274 1290 1292 1294 1300 1306 1311 1318 1334 1338 1343 1344 1347 1349 1352 1353 1356 1357 1359 1366 1370 1372 1376 1387 1388 1391 1392 1401 1402 1404 1407 1413 1415 1418 1420 1421 1424 1427 1428 1430 1435 1436 1439 1442 1443 1460 1461 1465 1466 1468 1476 1478 1485 1493 1500 1501 1503 1518 1520 1521 1532 1538 1542 1543 1548 1552 1557 1570 1577 1584 1588 1595 1598 1604 1605 1606 1612 1613 1614 1620 1634 1643 1646 1653 1656 1661 1662 1665 1666 1667 1673 1676 1682 1684 1686 1691 1692 1693 1696 1705 1711 1716 1718 1720 1721 1726 1736 1741 1745 1747 1748 1751 1756 1758 1760 1767 1785 1791 1794 1797 1801 1803 1805 1807 1811 1814 1818 1823 1826 1827 1830 1833 1846 1851 1854 1855 1856 1868 1869 1880 1881 1882 1886 1890 1901 1906 1909 1910 1913 1919 1927 1929 1930 1931 1937 1939 1940 1943 1944 1951 1952 1960 1963 1964 1965 1967 1969 1970 1976 1984 1987 1989 1994 1997 2001 2015 2022 2023 2028 2029 2033 2036 2042 2045 2047 2055 2057 2062 2063 2065 2067 2073 2076 2079 2097 2098 2099 2101 2113 2117 2119 2123 2131 2139 2150 2157 2159 2166 2167 2169 2180 2184 2185 2189 2190 2199 2209 2214 2221 2222 2234 2235 2237 2244 2245 2246 2260 2268 2269 2270 2271 2277 2285 2290 2293 2298 2300 2312 2313 2320 2321 2322 2324 2329 2334 2337 2341 2348 2353 2355 2362 2365 2367 2375 2380 2382 2385 2388 2390 2393 2396 2413 2428 2430 2432 2435 2438 2441 2447 2450 2470 2473 2474 2488 2496 2499 2506 2507 2511 2518 2520 2521 2523 2532 2543 2553 2554 2555 2563 2564 2566 2567 2570 2572 2579 2580 2581 2585 2598 2605 2607 2614 2616 2618 2619 2624 2634 2637 2649 2650 2662 2677 2678 2680 2684 2685 2690 2692 2693 2695 2697 2698 2702 2703 2711 2721 2724 2734 2742 2744 2754 2770 2773 2774 2778 2793 2794 2799 2816 2821 2823 2827 2828 2831 2845 2847 2852 2853 2855 2856 2869 2884 2885 2900 2907 2910 2917 2919 2926 2955 2956 2958 2959 2962 2967 2971 2975 2977 2979 2988 2992 2997 3005 3008 3017 3024 3026 3032 3037 3040 3049 3050 3054 3055 3056 3058 3070 3071 3077 3085 3086 3090 3094 3097 3102 3103 3106 3107 3109 3110 3111 3112 3113 3114 3119 3127 3128 3130 3132 3141 3143 3146 3147 3150 3154 3158 3163 3170 3175 3180 3187 3189 3190 3191 3198 3208 3209 3213 3225 3228 3241 3252 3264 3265 3279 3282 3300 3301 3302 3305 3312 3320 3323 3324 3326 3332 3336 3346 3349 3361 3362 3364 3368 3381 3384 3386 3389 3391 3392 3398 3399 3407 3412 3416 3422 3423 3426 3427 3437 3449 3463 3465 3472 3475 3477 3479 3480 3483 3490 3491 3494 3499 3503 3506 3510 3514 3516 3519 3535 3536 3538 3542 3543 3554 3556 3569 3575 3581 3582 3583 3587 3588 3593 3597 3601 3602 3610 3612 3613 3614 3621 3622 3629 3633 3637 3642 3644 3660 3664 3667 3681 3694 3695 3696 3703 3717 3719 3722 3725 3728 3736 3737 3739 3742 3744 3745 3746 3758 3759 3763 3764 3765 3770 3787 3792 3793 3798 3802 3803 3805 3810 3812 3813 3818 3827 3835 3839 3840 3845 3849 3855 3862 3869 3874 3876 3878 3883 3884 3888 3898 3902 3911 3912 3917 3918 3922 3924 3926 3932 3933 3941 3951 3953 3967 3969 3970 3977 3978 3980 3986 3988 3995 3999 4004 4005 4009 4010 4015 4016 4018 4022 4026 4030 4036 4038 4040 4056 4057 4063 4070 4072 4073 4078 4083 4084 4097 4101 4102 4104 4105 4106 4118 4119 4127 4128 4140 4141 4143 4144 4145 4150 4151 4161 4162 4171 4209 4213 4222 4224 4225 4226 4228 4233 4236 4238 4239 4248 4249 4250 4254 4255 4266 4268 4270 4279 4282 4284 4285 4287 4293 4305 4308 4312 4315 4317 4319 4321 4322 4325 4328 4329 4333 4335 4339 4343 4344 4346 4351 4353 4362 4365 4372 4375 4377 4384 4385 4386 4395 4397 4399 4403 4405 4409 4410 4412 4415 4417 4418 4420 4421 4423 4425 4436 4437 4446 4449 4452 4453 4460 4476 4479 4480 4481 4491 4494 4509 4529 4534 4537 4539 4542 4545 4546 4558 4564 4568 4576 4579 4582 4586 4599 4603 4614 4621 4629 4637 4641 4642 4649 4650 4656 4659 4669 4671 4675 4677 4682 4683 4684 4688 4695 4696 4698 4703 4706 4707 4715 4719 4722 4724 4734 4735 4741 4744 4750 4755 4758 4765 4774 4776 4785 4788 4794 4795 4797 4798 4807 4808 4810 4820 4824 4829 4831 4834 4843 4844 4848 4849 4853 4855 4875 4877 4881 4883 4884 4885 4893 4894 4896 4900 4903 4906 4911 4912 4919 4921 4927 4928 4931 4932 4937 4938 4941 4944 4946 4947 4955 4958 4959 4960 4961 4962 4964 4965 4966 4972 4982 4984 4986 4994 4995 4996 4997 5002 5012 5013 5018 5020 5027 5035 5041 5044 5048 5049 5050 5052 5055 5056 5064 5067 5072 5077 5080 5084 5088 5091 5100 5108 5115 5117 5119 5130 5132 5134 5143 5148 5153 5156 5158 5161 5163 5168 5169 5173 5178 5180 5202 5203 5213 5224 5226 5234 5242 5249 5253 5257 5261 5266 5267 5273 5276 5277 5285 5291 5292 5296 5305 5311 5318 5319 5330 5337 5339 5350 5352 5353 5355 5361 5368 5377 5388 5405 5409 5413 5415 5416 5417 5425 5439 5441 5443 5449 5450 5452 5455 5467 5471 5482 5484 5486 5513 5519 5520 5529 5540 5541 5542 5543 5545 5553 5555 5560 5561 5562 5563 5567 5576 5579 5580 5586 5589 5591 5593 5599 5603 5607 5609 5610 5621 5624 5631 5635 5642 5650 5659 5662 5670 5677 5685 5695 5698 5699 5702 5706 5712 5713 5717 5721 5722 5733 5735 5736 5737 5738 5739 5743 5745 5746 5749 5760 5761 5765 5770 5776 5782 5783 5788 5793 5794 5800 5803 5804 5812 5821 5827 5828 5829 5838 5839 5840 5857 5872 5874 5875 5882 5884 5885 5888 5890 5896 5900 5902 5904 5905 5910 5912 5922 5923 5925 5926 5928 5929 5936 5941 5955 5964 5965 5972 5974 5986 5987 5992 5994 6003 6004 6009 6014 6018 6019 6021 6022 6024 6032 6045 6049 6052 6053 6057 6059 6064 6071 6075 6078 6083 6090 6097 6100 6103 6105 6111 6119 6141 6142 6149 6150 6152 6156 6157 6167 6169 6172 6177 6181 6184 6190 6192 6195 6199 6219 6221 6228 6238 6240 6263 6267 6271 6282 6287 6295 6296 6297 6312 6315 6317 6322 6323 6324 6329 6330 6333 6337 6342 6344 6346 6347 6348 6349 6359 6364 6375 6380 6384 6392 6393 6399 6403 6408 6412 6413 6421 6423 6430 6432 6435 6446 6447 6450 6451 6456 6458 6459 6470 6476 6478 6489 6493 6512 6516 6517 6530 6531 6537 6541 6545 6546 6548 6550 6551 6552 6564 6566 6571 6576 6578 6582 6586 6588 6589 6590 6595 6596 6597 6598 6600 6601 6609 6611 6612 6617 6620 6621 6624 6629 6635 6637 6657 6658 6672 6677 6679 6689 6690 6692 6693 6699 6701 6702 6705 6707 6714 6716 6718 6721 6732 6735 6739 6743 6744 6745 6756 6757 6759 6761 6763 6771 6773 6783 6785 6786 6791 6801 6803 6804 6805 6806 6808 6813
 */